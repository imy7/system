name: Update Proxy Lists

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点运行（北京时间早上8点）
  workflow_dispatch:    # 允许手动触发

jobs:
  update-proxies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pip install requests
        
      - name: Fetch and update proxy data
        run: |
          python << EOF
          import requests
          import os
          
          # 确保目标目录存在
          os.makedirs(os.path.dirname("cmliu/proxy.txt"), exist_ok=True)
          os.makedirs(os.path.dirname("cmliu/ipv4.txt"), exist_ok=True)
          
          # 函数：获取API数据并格式化
          def fetch_and_format(url, format_func=None):
              try:
                  response = requests.get(url, timeout=10)
                  response.raise_for_status()
                  data = response.json()
                  
                  if format_func:
                      return format_func(data)
                  return data
              except Exception as e:
                  print(f"Error fetching {url}: {e}")
                  return None
          
          # 格式化函数1：bestproxy格式
          def format_bestproxy(data):
              result = []
              for item in data.get('data', []):
                  ip = item.get('ip')
                  country = item.get('country', 'UNKNOWN')
                  if ip:
                      result.append(f"{ip}#{country}")
              return '\n'.join(result)
          
          # 格式化函数2：简单IP列表格式
          def format_ip_list(data):
              if isinstance(data, list):
                  return '\n'.join(data)
              elif isinstance(data, dict):
                  # 处理可能的不同API响应结构
                  ips = []
                  for value in data.values():
                      if isinstance(value, list):
                          ips.extend(value)
                      elif isinstance(value, str):
                          ips.append(value)
                  return '\n'.join(ips)
              return str(data)
          
          # 获取并写入proxy.txt数据
          proxy_data = fetch_and_format(
              "https://ipdb.api.030101.xyz/?type=bestproxy&country=true",
              format_bestproxy
          )
          if proxy_data:
              with open("cmliu/proxy.txt", "w") as f:
                  f.write(proxy_data + "\n")  # 确保以换行符结束
          
          # 获取并写入ipv4.txt数据
          ipv4_data_parts = []
          
          # 第一个API
          data1 = fetch_and_format(
              "https://addressesapi.090227.xyz/ip.164746.xyz",
              format_ip_list
          )
          if data1:
              ipv4_data_parts.append(data1)
          
          # 第二个API
          data2 = fetch_and_format(
              "https://addressesapi.090227.xyz/CloudFlareYes",
              format_ip_list
          )
          if data2:
              ipv4_data_parts.append(data2)
          
          # 第三个API
          data3 = fetch_and_format(
              "https://ipdb.api.030101.xyz/?type=bestcf&country=true",
              format_bestproxy  # 使用相同的格式化函数，假设结构相同
          )
          if data3:
              ipv4_data_parts.append(data3)
          
          # 合并所有数据并写入文件
          if ipv4_data_parts:
              with open("cmliu/ipv4.txt", "w") as f:
                  f.write('\n'.join(ipv4_data_parts) + "\n")  # 确保以换行符结束
          
          EOF
          
      - name: Check for changes
        id: check_changes
        run: |
          git diff --quiet || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add cmliu/proxy.txt cmliu/ipv4.txt
          git commit -m "chore: update proxy lists $(date +'%Y-%m-%d')"
          git push
